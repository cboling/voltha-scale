{
  "variables": {
    "user": "voltha",
    "password": "admin",
    "disk_size": "80000",
    "cpus": "4",
    "memory": "6144",
    "insecure_registry": "localhost:5000",
    "docker_version": "docker-ce=17.03*",
    "pod_network_cidr": "192.168.0.0/16"
  },
  "builders": [
    {
      "type": "virtualbox-iso",
      "guest_os_type": "Ubuntu_64",
      "vm_name": "voltha-telefonica-1.6",
      "name": "voltha-telefonica-1.6.ovf",
      "format": "ovf",
      "disk_size": "{{ user `disk_size` }}",
      "headless": "false",
      "iso_url": "http://releases.ubuntu.com/16.04.5/ubuntu-16.04.5-server-amd64.iso",
      "iso_checksum": "24636fd103a2a43c95659f1c3c63718e",
      "iso_checksum_type": "md5",
      "http_directory": "preseeds",
      "ssh_username": "{{ user `user` }}",
      "ssh_password": "{{ user `password` }}",
      "ssh_wait_timeout": "20m",
      "ssh_port": 22,
      "shutdown_command": "echo '{{ user `password` }}'|sudo -S shutdown -P now",
      "vboxmanage": [
        ["modifyvm", "{{.Name}}", "--cpus", "{{user `cpus`}}"],
        ["modifyvm", "{{.Name}}", "--memory", "{{user `memory`}}"],
        ["modifyvm", "{{.Name}}", "--nic1", "nat"]
      ],
      "boot_wait": "5s",
      "boot_command": [
        "<enter><wait>",
        "<f6><esc>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs>",
        "/install/vmlinuz<wait>",
        " url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.{{user `user`}}.vbox.cfg<wait>",
        " auto<wait>",
        " auto-install/enable=true<wait>",
        " debconf/priority=critical<wait>",
        " debconf/frontend=noninteractive<wait>",
        " debian-installer=en_US<wait>",
        " hostname={{ .Name }}<wait>",
        " fb=false<wait>",
        " initrd=/install/initrd.gz<wait>",
        " grub-installer/bootdev=/dev/sda<wait>",
        " noapic<wait>",
        " locale=en_US<wait>",
        " -- <wait>",
        "<enter><wait>"
      ]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "execute_command": "echo '{{ user `password` }}' | {{ .Vars }} sudo -E -S sh '{{ .Path }}'",
      "inline": [
        "echo '%sudo    ALL=(ALL)  NOPASSWD:ALL' >> /etc/sudoers",
        "echo 'Defaults exempt_group=sudo' >> /etc/sudoers",
        "echo '{{user `user`}}   ALL=NOPASSWD: ALL' >> /etc/sudoers"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing python base...\"",
        "sudo apt-get update",
        "sudo apt-get install -y make curl virtualenv gcc python-dev libssl-dev libpcap-dev g++",
        "sudo apt-get install -y git htop software-properties-common httpie jq debian-keyring",
        "sudo apt-get install -y debian-archive-keyring python-nose python-flake8 python-scapy"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing Docker...\"",
        "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 0EBFCD88",
        "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -",
        "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"",
        "sudo apt-get update",
        "sudo apt-get install -y \"{{ user `docker_version` }}\"",
        "sudo usermod -aG docker {{user `user`}}",
        "echo \"Updating Docker Options file...\"",
        "sudo sed -i '/#DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\"/c\\DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4 --insecure-registry {{ user `insecure_registry` }}\"' /etc/default/docker",
        "echo \"Restarting Docker...\"",
        "sudo service docker restart"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing Docker-Compose...\"",
        "sudo curl -o /usr/local/bin/docker-compose -L \"https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)\"",
        "sudo chmod 755 /usr/local/bin/docker-compose"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing JAVA SDK in case ONOS builds are required required...\"",
        "echo \"\"",
        "echo \"\"",
        "echo \"   ***************************************************************************\"",
        "echo \"   ****                                                                   ****\"",
        "echo \"   **** This step can be omitted if local changes/builds are not required ****\"",
        "echo \"   ****                                                                   ****\"",
        "echo \"   ***************************************************************************\"",
        "echo \"\"",
        "echo \"\"",
        "mkdir -p /home/{{user `user`}}/Downloads",
        "mkdir -p /home/{{user `user`}}/Applications",
        "cd /home/{{user `user`}}/Downloads",
        "wget http://archive.apache.org/dist/karaf/3.0.5/apache-karaf-3.0.5.tar.gz",
        "wget http://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz",
        "tar -zxvf apache-karaf-3.0.5.tar.gz -C ../Applications/",
        "tar -zxvf apache-maven-3.3.9-bin.tar.gz -C ../Applications/",
        "echo \"Installing Oracle JAVA-8\"",
        "sudo add-apt-repository ppa:webupd8team/java -y",
        "sudo apt-get update",
        "echo 'oracle-java8-installer shared/accepted-oracle-license-v1-1 select true' | sudo debconf-set-selections",
        "sudo apt-get install oracle-java8-installer oracle-java8-set-default -y",
        "echo \"Creating directory for custom ONOS Applications\"",
        "mkdir -p /home/{{user `user`}}/opencord/onos-apps/apps"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing v1.6 support containers from Docker Hub...\"",
        "sudo docker pull alpine:3.6",
        "sudo docker pull centos:7",
        "sudo docker pull centurylink/ca-certs:latest",
        "sudo docker pull debian:stretch-slim",
        "sudo docker pull docker.elastic.co/logstash/logstash:5.6.0",
        "sudo docker pull lyft/envoy:29361deae91575a1d46c7a21e913f19e75622ebe",
        "sudo docker pull maven:3-jdk-8-alpine",
        "sudo docker pull onosproject/onos:1.10.9",
        "sudo docker pull opennms/horizon-core-web:19.0.1-1",
        "sudo docker pull portainer/portainer:1.15.2",
        "sudo docker pull ubuntu:xenial",
        "sudo docker pull docker.elastic.co/elasticsearch/elasticsearch:5.6.0",
        "sudo docker pull kamon/grafana_graphite:latest",
        "sudo docker pull marcelmaatkamp/freeradius:latest",
        "sudo docker pull registry:2",
        "sudo docker pull postgres:9.6.1",
        "sudo docker pull quay.io/coreos/etcd:v3.2.9",
        "sudo docker pull wurstmeister/zookeeper:latest",
        "sudo docker pull wurstmeister/kafka:latest",
        "sudo docker pull consul:0.9.2",
        "sudo docker pull tianon/true:latest",
        "sudo docker pull gliderlabs/registrator:v7",
        "sudo docker pull fluent/fluentd:v0.12.42",
        "sudo docker pull tpdock/freeradius:latest"
      ]
    },
    {
      "type": "file",
      "source": "onos/apps/ctpd-olt/",
      "destination": "/home/{{user `user`}}/opencord/onos-apps/apps/"
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing VOLTHA Source in case local changes/builds are required...\"",
        "echo \"\"",
        "echo \"\"",
        "echo \"   ***************************************************************************\"",
        "echo \"   ****                                                                   ****\"",
        "echo \"   **** This step can be omitted if local changes/builds are not required ****\"",
        "echo \"   ****                                                                   ****\"",
        "echo \"   ***************************************************************************\"",
        "echo \"\"",
        "echo \"\"",
        "curl https://storage.googleapis.com/git-repo-downloads/repo >/tmp/repo",
        "chmod a+x /tmp/repo",
        "sudo mv /tmp/repo /usr/bin",
        "mkdir -p /home/{{user `user`}}/opencord",
        "cd /home/{{user `user`}}/opencord && repo init -u https://github.com/cboling/voltha-manifest -m voltha-telefonica-1.6.xml -b master",
        "repo sync",
        "cd incubator/voltha && git checkout master",
        "echo \"Building protoc\"",
        ". ./env.sh",
        "make install-protoc",
        "#echo \"Fetching containers\"",
        "#su {{user `user`}} -c \"(. ./env.sh && make fetch)\"",
        "echo \"Building VOLTHA as root since still in the same SSH session and not VOLTHA user not in docker group yet\"",
        "#echo \". ./env.sh && make fetch && make protoc protos base voltha ofagent shovel dashd cli portainer grafana consul tools envoy fluentd unum j2\" >mkbuild.sh",
        "echo \". ./env.sh && make fetch && make -k protoc protos base ofagent shovel dashd cli portainer grafana consul tools envoy fluentd unum j2\" >mkbuild.sh",
        "chmod a+x mkbuild.sh",
        "ls -aFC",
        "cat mkbuild.sh",
        "echo \"trying it now\"",
        "sudo ./mkbuild.sh",
        "echo \"did it work\"",
        "#sudo \"(. ./env.sh && make fetch && make protoc protos base voltha ofagent shovel dashd cli grafana consul tools envoy fluentd unum j2)\"",
        "#sudo \"(. ./env.sh && make build) \"",
        "#echo \"Fetching containers 2\"",
        "#sudo \"(. ./env.sh && make build) \"",
        "echo \"Build of VOLTHA completed successfully  ************\""
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Creating support directories...\"",
        "mkdir -p /home/{{user `user`}}/compose"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Enabling console access...\"",
        "sudo systemctl enable serial-getty@ttyS0.service",
        "sudo systemctl start serial-getty@ttyS0.service"
      ]
    },
    {
      "type": "file",
      "source": "voltha/voltha_compose_start.sh",
      "destination": "/home/{{user `user`}}/voltha_start.sh"
    },
    {
      "type": "file",
      "source": "voltha/voltha_compose_stop.sh",
      "destination": "/home/{{user `user`}}/voltha_stop.sh"
    },
    {
      "type": "file",
      "source": "voltha/voltha",
      "destination": "/home/{{user `user`}}/voltha"
    },
    {
      "type": "file",
      "source": "voltha/.env",
      "destination": "/home/{{user `user`}}/.env"
    },
    {
      "type": "file",
      "source": "compose/docker-compose-telefonica-test.yml",
      "destination": "/home/{{user `user`}}/compose/docker-compose-system-test.yml"
    },
    {
      "type": "shell",
      "inline": [
        "echo '@reboot /usr/bin/docker ps && /etc/init.d/voltha start' | sudo crontab -",
        "# sudo touch /var/spool/cron/crontabs/root",
        "# echo '@reboot /usr/bin/docker ps && /etc/init.d/voltha start' | sudo tee --append /var/spool/cron/crontabs/root",
        "# sudo chmod 600 /var/spool/cron/crontabs/root",
        "sudo chmod a+x voltha_start.sh",
        "sudo chmod a+x voltha_stop.sh",
        "sudo chmod a+x voltha",
        "sudo cp voltha  /etc/init.d/",
        "sudo update-rc.d voltha defaults",
        "sudo apt autoremove -y"
      ]
    }
  ]
}
