{
  "variables": {
    "user": "voltha",
    "password": "admin",
    "disk_size": "20000",
    "cpus": "4",
    "memory": "6144",
    "insecure_registry": "localhost:5000",
    "docker_version": "docker-ce=17.03*",
    "k8s_version": "1.11.3-*",
    "k8s_cni_version": "0.6.0-*"
  },
  "builders": [
    {
      "type": "qemu",
      "name": "voltha-1.x",
      "format": "qcow2",
      "accelerator": "kvm",
      "disk_size": "{{ user `disk_size` }}",
      "headless": "false",
      "iso_url": "http://releases.ubuntu.com/16.04.5/ubuntu-16.04.5-server-amd64.iso",
      "iso_checksum": "24636fd103a2a43c95659f1c3c63718e",
      "iso_checksum_type": "md5",
      "http_directory": "preseeds",
      "ssh_username": "{{ user `user` }}",
      "ssh_password": "{{ user `password` }}",
      "ssh_wait_timeout": "20m",
      "ssh_port": 22,
      "shutdown_command": "echo '{{ user `password` }}'|sudo -S shutdown -P now",
      "net_device": "virtio-net",
      "vm_name": "voltha-1.x",
      "boot_wait": "5s",
      "boot_command": [
        "<enter><wait>",
        "<f6><esc>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",
        "<bs><bs><bs>",
        "/install/vmlinuz<wait>",
        " url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.{{user `user`}}.cfg<wait>",
        " auto<wait>",
        " auto-install/enable=true<wait>",
        " debconf/priority=critical<wait>",
        " debconf/frontend=noninteractive<wait>",
        " debian-installer=en_US<wait>",
        " hostname={{ .Name }}<wait>",
        " fb=false<wait>",
        " initrd=/install/initrd.gz<wait>",
        " grub-installer/bootdev=/dev/vda<wait>",
        " noapic<wait>",
        " -- <wait>",
        "<enter><wait>"
      ],
      "qemuargs": [
        [ "-m", "{{ user `memory` }}" ],
        [ "-smp", "cpus={{ user `cpus` }}"]
      ]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "execute_command": "echo '{{ user `password` }}' | {{ .Vars }} sudo -E -S sh '{{ .Path }}'",
      "inline": [
        "echo '%sudo    ALL=(ALL)  NOPASSWD:ALL' >> /etc/sudoers",
        "echo 'Defaults exempt_group=sudo' >> /etc/sudoers",
        "echo '{{user `user`}}   ALL=NOPASSWD: ALL' >> /etc/sudoers"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing python base...\"",
        "sudo apt-get update",
        "sudo apt-get install -y make curl virtualenv gcc python-dev libssl-dev libpcap-dev g++",
        "sudo apt-get install -y git htop software-properties-common httpie jq debian-keyring",
        "sudo apt-get install -y debian-archive-keyring python-nose python-flake8 python-scapy"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing Docker...\"",
        "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 0EBFCD88",
        "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -",
        "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"",
        "sudo apt-get update",
        "sudo apt-get install -y \"{{ user `docker_version` }}\"",
        "sudo usermod -aG docker {{user `user`}}",
        "echo \"Updating Docker Options file...\"",
        "sudo sed -i '/#DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4\"/c\\DOCKER_OPTS=\"--dns 8.8.8.8 --dns 8.8.4.4 --insecure-registry {{ user `insecure_registry` }}\"' /etc/default/docker",
        "echo \"Restarting Docker...\"",
        "sudo service docker restart"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing Docker-Compose...\"",
        "sudo curl -o /usr/local/bin/docker-compose -L \"https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)\"",
        "sudo chmod 755 /usr/local/bin/docker-compose"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing Kubernetes...\"",
        "sudo apt-get install -y ebtables ethtool apt-transport-https",
        "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -",
        "echo \"deb http://apt.kubernetes.io/ kubernetes-xenial main\" >/tmp/kubernetes.list",
        "echo >>/tmp/kubernetes.list",
        "sudo cp /tmp/kubernetes.list /etc/apt/sources.list.d/kubernetes.list",
        "sudo apt-get update",
        "sudo apt install -y \"kubeadm={{ user `k8s_version` }}\" \"kubelet={{ user `k8s_version` }}\" \"kubectl={{ user `k8s_version` }}\" \"kubernetes-cni={{ user `k8s_cni_version` }}\"",
        "sudo swapoff -a",
        "sudo kubeadm init --pod-network-cidr=192.168.0.0/16",
        "mkdir -p /home/{{user `user`}}/.kube",
        "sudo cp -i /etc/kubernetes/admin.conf /home/{{user `user`}}/.kube/config",
        "sudo chown $(id -u):$(id -g) /home/{{user `user`}}/.kube/config",
        "kubectl taint nodes --all node-role.kubernetes.io/master-"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing Calico CNI Plugin...\"",
        "kubectl apply -f https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/hosted/kubeadm/1.6/calico.yaml",
        "echo \"20 Second pause to allow kubectl to complete\" && sleep 20"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing helm...\"",
        "curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash",
        "cat > /tmp/helm.yaml <<EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: helm\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: helm\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n  - kind: ServiceAccount\n    name: helm\n    namespace: kube-system\nEOF",
        "kubectl create -f /tmp/helm.yaml",
        "helm init --service-account helm",
        "helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing SEBA Helm charts...\"",
        "cd /home/{{user `user`}} && git clone https://gerrit.opencord.org/helm-charts"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing VOLTHA Source in case local changes/builds are required...\"",
        "echo \"\"",
        "echo \"\"",
        "echo \"   ***************************************************************************\"",
        "echo \"   ****                                                                   ****\"",
        "echo \"   **** This step can be omitted if local changes/builds are not required ****\"",
        "echo \"   ****                                                                   ****\"",
        "echo \"   ***************************************************************************\"",
        "echo \"\"",
        "echo \"\"",
        "curl https://storage.googleapis.com/git-repo-downloads/repo >/tmp/repo",
        "chmod a+x /tmp/repo",
        "sudo mv /tmp/repo /usr/bin",
        "mkdir -p /home/{{user `user`}}/opencord",
        "cd /home/{{user `user`}}/opencord && repo init -u https://github.com/cboling/voltha-manifest -m voltha-1.x.xml",
        "repo sync",
        "cd incubator/voltha && git checkout master",
        "# . ./env.sh",
        "# make fetch",
        "# make build"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing latest MINIMAL VOLTHA and support containers from Docker Hub...\"",
        "sudo docker pull wurstmeister/zookeeper:latest",
        "sudo docker pull wurstmeister/kafka:latest",
        "sudo docker pull consul:0.9.2",
        "sudo docker pull gliderlabs/registrator:latest",
        "sudo docker pull fluent/fluentd:v0.12.42",
        "sudo docker pull voltha/voltha-envoy",
        "sudo docker pull voltha/voltha-voltha",
        "sudo docker pull voltha/voltha-cli",
        "sudo docker pull voltha/voltha-ofagent",
        "sudo docker pull tpdock/freeradius:latest",
        "sudo docker pull voltha/voltha-onos:latest"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Installing latest accessory VOLTHA and support containers from Docker Hub...\"",
        "echo \"\"",
        "echo \"\"",
        "echo \"   *********************************************************************\"",
        "echo \"   ****                                                             ****\"",
        "echo \"   **** This step can be omitted if only automated tests are needed ****\"",
        "echo \"   ****                                                             ****\"",
        "echo \"   *********************************************************************\"",
        "echo \"\"",
        "echo \"\"",
        "sudo docker pull voltha/voltha-grafana",
        "sudo docker pull voltha/voltha-shovel",
        "sudo docker pull voltha/voltha-netconf",
        "sudo docker pull voltha/voltha-nginx",
        "sudo docker pull voltha/voltha-portainer"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Creating support directories...\"",
        "mkdir -p /home/{{user `user`}}/compose",
        "mkdir -p /home/{{user `user`}}/k8s",
        "mkdir -p /home/{{user `user`}}/mocks"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo \"Enabling console access...\"",
        "sudo systemctl enable serial-getty@ttyS0.service",
        "sudo systemctl start serial-getty@ttyS0.service"
      ]
    },
    {
      "type": "file",
      "source": "voltha/voltha_compose_start.sh",
      "destination": "/home/{{user `user`}}/voltha_start.sh"
    },
    {
      "type": "file",
      "source": "voltha/voltha_compose_stop.sh",
      "destination": "/home/{{user `user`}}/voltha_stop.sh"
    },
    {
      "type": "file",
      "source": "voltha/voltha_k8s_start.sh",
      "destination": "/home/{{user `user`}}/voltha_k8s_start.sh"
    },
    {
      "type": "file",
      "source": "voltha/voltha_k8s_stop.sh",
      "destination": "/home/{{user `user`}}/voltha_k8s_stop.sh"
    },
    {
      "type": "file",
      "source": "voltha/voltha",
      "destination": "/home/{{user `user`}}/voltha"
    },
    {
      "type": "file",
      "source": "voltha/.env",
      "destination": "/home/{{user `user`}}/.env"
    },
    {
      "type": "file",
      "source": "compose/docker-compose-auth-test.yml",
      "destination": "/home/{{user `user`}}/compose/docker-compose-auth-test.yml"
    },
    {
      "type": "file",
      "source": "compose/docker-compose-min-system-test.yml",
      "destination": "/home/{{user `user`}}/compose/docker-compose-min-system-test.yml"
    },
    {
      "type": "shell",
      "inline": [
        "sudo touch /var/spool/cron/crontabs/root",
        "echo '@reboot /usr/bin/docker ps && /etc/init.d/voltha start' | sudo tee --append /var/spool/cron/crontabs/root",
        "sudo chmod 600 /var/spool/cron/crontabs/root",
        "sudo chmod a+x voltha_start.sh",
        "sudo chmod a+x voltha_stop.sh",
        "sudo chmod a+x voltha",
        "sudo cp voltha  /etc/init.d/",
        "sudo update-rc.d voltha defaults"
      ]
    }
  ]
}
